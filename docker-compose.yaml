version: '3.8'

services:
  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: finsim-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  postgres:
    image: postgres:15-alpine
    container_name: finsim-postgres
    environment:
      POSTGRES_DB: finsim
      POSTGRES_USER: finsim
      POSTGRES_PASSWORD: finsim123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: finsim-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: finsim-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  influxdb:
    image: influxdb:2.7-alpine
    container_name: finsim-influxdb
    ports:
      - "8086:8086"
    environment:
      INFLUXDB_DB: finsim
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: admin123
    volumes:
      - influx_data:/var/lib/influxdb2

  # Core Services
  market-data:
    build:
      context: ./services/market-data
      dockerfile: Dockerfile
    container_name: finsim-market-data
    depends_on:
      - kafka
      - redis
    ports:
      - "8001:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://finsim:finsim123@postgres:5432/finsim
    volumes:
      - ./services/market-data:/app

  simulation-engine:
    build:
      context: ./services/simulation-engine
      dockerfile: Dockerfile
    container_name: finsim-simulation-engine
    depends_on:
      - kafka
      - redis
      - influxdb
    ports:
      - "8002:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_URL: redis://redis:6379
      INFLUXDB_URL: http://influxdb:8086
      DATABASE_URL: postgresql://finsim:finsim123@postgres:5432/finsim

  agents:
    build:
      context: ./services/agents
      dockerfile: Dockerfile
    container_name: finsim-agents
    depends_on:
      - kafka
      - simulation-engine
    ports:
      - "8003:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_URL: redis://redis:6379
      SIMULATION_ENGINE_URL: http://simulation-engine:8000
    volumes:
      - ./services/agents:/app
      - ./models:/app/models

  risk-analytics:
    build:
      context: ./services/risk-analytics
      dockerfile: Dockerfile
    container_name: finsim-risk-analytics
    depends_on:
      - kafka
      - postgres
    ports:
      - "8004:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      DATABASE_URL: postgresql://finsim:finsim123@postgres:5432/finsim
      REDIS_URL: redis://redis:6379

  portfolio:
    build:
      context: ./services/portfolio
      dockerfile: Dockerfile
    container_name: finsim-portfolio
    depends_on:
      - postgres
      - risk-analytics
    ports:
      - "8005:8000"
    environment:
      DATABASE_URL: postgresql://finsim:finsim123@postgres:5432/finsim
      RISK_ANALYTICS_URL: http://risk-analytics:8000

  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: finsim-auth
    depends_on:
      - postgres
    ports:
      - "8006:8000"
    environment:
      DATABASE_URL: postgresql://finsim:finsim123@postgres:5432/finsim
      JWT_SECRET_KEY: your-secret-key-change-in-production
      JWT_ALGORITHM: HS256

  api-gateway:
    image: kong:3.4
    container_name: finsim-api-gateway
    depends_on:
      - postgres
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: finsim
      KONG_PG_PASSWORD: finsim123
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./services/api-gateway/kong.yml:/usr/local/kong/declarative/kong.yml

  # Frontend
  dashboard:
    build:
      context: ./ui/dashboard
      dockerfile: Dockerfile
    container_name: finsim-dashboard
    depends_on:
      - api-gateway
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_BASE_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: finsim-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:10.0.0
    container_name: finsim-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  postgres_data:
  redis_data:
  influx_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: finsim-network